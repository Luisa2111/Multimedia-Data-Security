def resizing_bf(originalImage, watermarkedImage, scale_min, scale_max, scale_step, direction):
  if direction==1:
    #go this way ->
    for scale in np.arange(scale_min, scale_max+scale_step, scale_step):
      if scale!=0:
        attackedImage=resizing(watermarkedImage, scale)
        decisionMade, wpsnrWatermarkAttacked = detection(originalImage, watermarkedImage, attackedImage)
        #I want to destroy the watermark
        print("Forward step=",scale)
        if decisionMade==0:
          return [attackedImage, wpsnrWatermarkAttacked, decisionMade, scale]
  elif direction==-1:
    #go the other way <-
    for scale in np.flip(np.arange(scale_min-scale_step, scale_max+scale_step, scale_step)):
      if scale!=0:
        attackedImage=resizing(watermarkedImage, scale)
        decisionMade, wpsnrWatermarkAttacked = detection(originalImage, watermarkedImage, attackedImage)
        #I want to find the watermark
        print("Backward step=",scale)
        print(wpsnrWatermarkAttacked)
        if decisionMade==1:
          return attackedImage, wpsnrWatermarkAttacked, decisionMade, scale
  return "resizing does not work"

def resizing_bf_definitive(originalImage, watermarkedImage):
  #it seems that the seed does not influence much the attack
  attackedImage, wpsnrWatermarkAttacked, decisionMade, scale = resizing_bf(originalImage, watermarkedImage, 1    , 50     , 1   , 1)
  #I'm sure that with std-1 the watermark will be present as I want
  attackedImage, wpsnrWatermarkAttacked, decisionMade, scale = resizing_bf(originalImage, watermarkedImage, scale-1, scale    , 0.1 , -1)
  #I'm sure that with std+0.1 the watermark will be NOT present as I want
  attackedImage, wpsnrWatermarkAttacked, decisionMade, scale = resizing_bf(originalImage, watermarkedImage, scale  , scale+0.1, 0.01, 1)
  #I'm sure that with std-1 the watermark will be present as I want
  attackedImage, wpsnrWatermarkAttacked, decisionMade, scale = resizing_bf(originalImage, watermarkedImage, scale-0.01, scale    , 0.001 , -1)
  #I'm sure that with std+0.1 the watermark will be NOT present as I want
  attackedImage, wpsnrWatermarkAttacked, decisionMade, scale = resizing_bf(originalImage, watermarkedImage, scale  , scale+0.001, 0.0001, 1)
  return attackedImage, wpsnrWatermarkAttacked, decisionMade, scale
